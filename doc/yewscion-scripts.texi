@c Variables: yewscion-scripts Yewscion Scripts Miscellaneous
\input texinfo
@c -*-texinfo-*-

@c %**start of header
@setfilename yewscion-scripts.info
@documentencoding UTF-8
@settitle Yewscion Scripts Reference Manual
@c %**end of header

@include version.texi

@copying
Copyright @copyright{} 2022 Christopher Rodriguez

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled ``GNU Free
Documentation License''.
@end copying

@dircategory Miscellaneous
@direntry
* Yewscion Scripts: (yewscion-scripts).   
@end direntry

@titlepage
@title The Yewscion Scripts Manual
@author Christopher Rodriguez

@page
@vskip 0pt plus 1filll

@insertcopying
@end titlepage

@contents

@c *********************************************************************
@node Top
@top Yewscion Scripts

This document describes Yewscion Scripts version @value{VERSION}.

@menu
* Introduction::                Why Yewscion Scripts?

* Wrappers::                    Wrappers around other programs.
* Concept Index::               Concepts Used, and Where.
* Programming Index::           Functions, Variables, Etc.

* Procedure Types::             Data, Calculations, and Actions.
* GNU FDL::                     The License for this Manual.

@detailmenu
 --- The Detailed Node Listing ---

Introduction
@c add other sections with subsections as above.

Wrappers

* ADLMidi Wrapper::


@end detailmenu
@end menu

@c *********************************************************************
@node Introduction, Wrappers, Top, Top
@chapter Introduction

The purpose of this library is .

It was started when .

The hope is that .

@menu

@end menu

@node Wrappers, ADLMidi Wrapper, Introduction, Top
@chapter Wrappers

@menu
* ADLMidi Wrapper::
@end menu

@node ADLMidi Wrapper, Concept Index, Wrappers, Wrappers
@section ADLMidi Wrapper

The main issue this script is meant to solve is that the @samp{adlmidi}
command expects the filename to come first, and the arguments
after. However, @samp{emms} expects the arguments to come first, and the
filename to be the last argument. I thought it would be easier to
wrap @samp{adlmidi} than to rewrite part of @samp{emms}, so I chose to make a
wrapper script that accnepts arguments the way @samp{emms} expects, and
feeds them to @samp{adlmidi} the way that it expects. So everyone is
happy.

@example
#!/usr/bin/env -S bash -i 
case $# in
    0)
        echo "This script runs the adlmidi command with the arguments You
        specify, while accepting them /before/ the file, not just
        after. Usage: adlmidi-wrapper <OPTIONS> <FILE>."
        ;;
    1)
        adlmidi $1
        ;;
    *)
        file="$@{@@: -1@}"
        arguments=""
        for i in $@{@@: 1:$#-1@}
        do
            arguments="$@{arguments@} $i"
        done
        command="adlmidi $@{file@} $@{arguments@}"
        $command
        ;;
esac

@end example

We'll need to define some cases here. First, the case of someone
just calling the script with no arguments. We'll display some
(nominally) helpful text, that will instruct them to call the
script as expected.

@example
echo "This script runs the adlmidi command with the arguments You
specify, while accepting them /before/ the file, not just
after. Usage: adlmidi-wrapper <OPTIONS> <FILE>."
@end example

With one argument, we'll assumed that the user has supplied a file
to play. This will just pass it along to @samp{adlmidi} in that case,
then.

@example
adlmidi $1
@end example

With more than one arguments, we're going to assume @emph{everything}
aside from the script name and last argument are options the user
has specified. We'll isolate the filename, then build a string of
all of the arguments delimited by a space. Finally, we'll build a
new call to @samp{adlmidi} in the way it expects us to, and then run it.

@example
file="$@{@@: -1@}"
arguments=""
for i in $@{@@: 1:$#-1@}
do
    arguments="$@{arguments@} $i"
done
command="adlmidi $@{file@} $@{arguments@}"
$command
@end example

The main use for this is as a backend to @samp{emms}, so the fact that
we can't play more than one file with this script is @emph{not} a
bug. It's a feature, since @samp{emms} will be the one controlling the
order files are played in. We just needed a backend for @samp{emms} to
call.
@c *********************************************************************
@node Concept Index, Programming Index, ADLMidi Wrapper, Top
@chapter Concept Index
@printindex cp

@c *********************************************************************
@node Programming Index, Procedure Types, Concept Index, Top
@chapter Programming Index
@syncodeindex tp fn
@syncodeindex vr fn
@printindex fn

@c *********************************************************************
@node Procedure Types, GNU FDL, Programming Index, Top
@cindex Procedure Types
@include procedure-types.texi

@c *********************************************************************
@node GNU FDL, , Procedure Types, Top
@appendix GNU Free Documentation License
@cindex license, GNU Free Documentation License
@include fdl-1.3.texi

@c *********************************************************************
@bye
