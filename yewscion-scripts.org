#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+title: yewscion's scripts
#+date: <2021-08-13 Fri>
#+author: Christopher Rodriguez
#+email: yewscion@gmail.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 28.0.50 (Org mode 9.4.6)
#+texinfo_filename: doc/texi/yewscion-scripts.info
#+texinfo_class: info
#+texinfo_header:
#+texinfo_post_header:
#+subtitle: All of the shell scripts I've made, and their documentation.
#+subauthor:
#+texinfo_dir_category: Scripts
#+texinfo_dir_title: Yewscion's Scripts: (yewscion-scripts)
#+texinfo_dir_desc: Small Utility Shell Scripts
#+texinfo_printed_title: Yewscion's Scripts
#+man_filename: doc/yewscion-scripts.man
#+property: header-args bash :eval never :mkdirp yes :noweb yes :comments no
#+property: header-args scheme :eval never :mkdirp yes :noweb yes :session GUILE
* Concept
This is a literate programming filemade to support the yewscion-scripts project.

This section is reserved for a high-level abstract description of what the
project is. In particular, the overview should walk through the program flow as
much as possible, to ensure clarity of thought before code work begins.

This is basically a collection of bash/guile scripts that I made to solve small
(mostly sysadmin-like) problems I run into. Nothing serious or important, and
anything that gets too big should probably move out into its own repo.
** Overview
This space intentionally left blank.
* Generic Project Files
These files exist in every repository, or should, anyway. As this is a literate
programming file, however, they are also included here. While they can mostly
stand for themselves, I will add a sentence or two about each, as well as any
deviations in this specific repo.
** README
This is the all-important gateway into the repository. I follow [[https://www.makeareadme.com/][Make a README]]'s
specification in all of my projects, as I think it is important to standardize
such an outward-facing part of the documentation.

#+begin_src markdown :tangle "README.md" :eval never
# yewscion-scripts

A personal collection of scripts

## Installation

Clone this repository and invoke the standard:

```
./bootstrap
configure
make
make install
```

## Usage

Each script will have its own documentation, which can be found under `doc/`.

## Contributing

Pull Requests are welcome, as are bugfixes and extensions. Please open issues as
needed. If You contribute a feature, needs to be tests and documentation.


## License

[AGPL-3.0](https://choosealicense.com/licenses/agpl-3.0/)

#+end_src

** LICENSE
I am a huge supporter of [[https://en.wikipedia.org/wiki/Free_software][Free Software]], and as such generally use licenses to
support that stance.

I want to avoid my code being locked away into something someone else is doing,
but I also want to allow others to benefit from my work without obligation on
their part to subscribe to my beliefs. I use the [[https://www.gnu.org/licenses/agpl-3.0.en.html][GNU Affero General Public
License]] for most of my work because of this. However, if You want to debate
licenses, I am open to a casual, friendly discussion.

#+begin_src text :tangle "LICENSE" :eval never
                      GNU AFFERO GENERAL PUBLIC LICENSE
                         Version 3, 19 November 2007

   Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
   Everyone is permitted to copy and distribute verbatim copies
   of this license document, but changing it is not allowed.

                              Preamble

    The GNU Affero General Public License is a free, copyleft license for
  software and other kinds of works, specifically designed to ensure
  cooperation with the community in the case of network server software.

    The licenses for most software and other practical works are designed
  to take away your freedom to share and change the works.  By contrast,
  our General Public Licenses are intended to guarantee your freedom to
  share and change all versions of a program--to make sure it remains free
  software for all its users.

    When we speak of free software, we are referring to freedom, not
  price.  Our General Public Licenses are designed to make sure that you
  have the freedom to distribute copies of free software (and charge for
  them if you wish), that you receive source code or can get it if you
  want it, that you can change the software or use pieces of it in new
  free programs, and that you know you can do these things.

    Developers that use our General Public Licenses protect your rights
  with two steps: (1) assert copyright on the software, and (2) offer
  you this License which gives you legal permission to copy, distribute
  and/or modify the software.

    A secondary benefit of defending all users' freedom is that
  improvements made in alternate versions of the program, if they
  receive widespread use, become available for other developers to
  incorporate.  Many developers of free software are heartened and
  encouraged by the resulting cooperation.  However, in the case of
  software used on network servers, this result may fail to come about.
  The GNU General Public License permits making a modified version and
  letting the public access it on a server without ever releasing its
  source code to the public.

    The GNU Affero General Public License is designed specifically to
  ensure that, in such cases, the modified source code becomes available
  to the community.  It requires the operator of a network server to
  provide the source code of the modified version running there to the
  users of that server.  Therefore, public use of a modified version, on
  a publicly accessible server, gives the public access to the source
  code of the modified version.

    An older license, called the Affero General Public License and
  published by Affero, was designed to accomplish similar goals.  This is
  a different license, not a version of the Affero GPL, but Affero has
  released a new version of the Affero GPL which permits relicensing under
  this license.

    The precise terms and conditions for copying, distribution and
  modification follow.

                         TERMS AND CONDITIONS

    0. Definitions.

    "This License" refers to version 3 of the GNU Affero General Public License.

    "Copyright" also means copyright-like laws that apply to other kinds of
  works, such as semiconductor masks.

    "The Program" refers to any copyrightable work licensed under this
  License.  Each licensee is addressed as "you".  "Licensees" and
  "recipients" may be individuals or organizations.

    To "modify" a work means to copy from or adapt all or part of the work
  in a fashion requiring copyright permission, other than the making of an
  exact copy.  The resulting work is called a "modified version" of the
  earlier work or a work "based on" the earlier work.

    A "covered work" means either the unmodified Program or a work based
  on the Program.

    To "propagate" a work means to do anything with it that, without
  permission, would make you directly or secondarily liable for
  infringement under applicable copyright law, except executing it on a
  computer or modifying a private copy.  Propagation includes copying,
  distribution (with or without modification), making available to the
  public, and in some countries other activities as well.

    To "convey" a work means any kind of propagation that enables other
  parties to make or receive copies.  Mere interaction with a user through
  a computer network, with no transfer of a copy, is not conveying.

    An interactive user interface displays "Appropriate Legal Notices"
  to the extent that it includes a convenient and prominently visible
  feature that (1) displays an appropriate copyright notice, and (2)
  tells the user that there is no warranty for the work (except to the
  extent that warranties are provided), that licensees may convey the
  work under this License, and how to view a copy of this License.  If
  the interface presents a list of user commands or options, such as a
  menu, a prominent item in the list meets this criterion.

    1. Source Code.

    The "source code" for a work means the preferred form of the work
  for making modifications to it.  "Object code" means any non-source
  form of a work.

    A "Standard Interface" means an interface that either is an official
  standard defined by a recognized standards body, or, in the case of
  interfaces specified for a particular programming language, one that
  is widely used among developers working in that language.

    The "System Libraries" of an executable work include anything, other
  than the work as a whole, that (a) is included in the normal form of
  packaging a Major Component, but which is not part of that Major
  Component, and (b) serves only to enable use of the work with that
  Major Component, or to implement a Standard Interface for which an
  implementation is available to the public in source code form.  A
  "Major Component", in this context, means a major essential component
  (kernel, window system, and so on) of the specific operating system
  (if any) on which the executable work runs, or a compiler used to
  produce the work, or an object code interpreter used to run it.

    The "Corresponding Source" for a work in object code form means all
  the source code needed to generate, install, and (for an executable
  work) run the object code and to modify the work, including scripts to
  control those activities.  However, it does not include the work's
  System Libraries, or general-purpose tools or generally available free
  programs which are used unmodified in performing those activities but
  which are not part of the work.  For example, Corresponding Source
  includes interface definition files associated with source files for
  the work, and the source code for shared libraries and dynamically
  linked subprograms that the work is specifically designed to require,
  such as by intimate data communication or control flow between those
  subprograms and other parts of the work.

    The Corresponding Source need not include anything that users
  can regenerate automatically from other parts of the Corresponding
  Source.

    The Corresponding Source for a work in source code form is that
  same work.

    2. Basic Permissions.

    All rights granted under this License are granted for the term of
  copyright on the Program, and are irrevocable provided the stated
  conditions are met.  This License explicitly affirms your unlimited
  permission to run the unmodified Program.  The output from running a
  covered work is covered by this License only if the output, given its
  content, constitutes a covered work.  This License acknowledges your
  rights of fair use or other equivalent, as provided by copyright law.

    You may make, run and propagate covered works that you do not
  convey, without conditions so long as your license otherwise remains
  in force.  You may convey covered works to others for the sole purpose
  of having them make modifications exclusively for you, or provide you
  with facilities for running those works, provided that you comply with
  the terms of this License in conveying all material for which you do
  not control copyright.  Those thus making or running the covered works
  for you must do so exclusively on your behalf, under your direction
  and control, on terms that prohibit them from making any copies of
  your copyrighted material outside their relationship with you.

    Conveying under any other circumstances is permitted solely under
  the conditions stated below.  Sublicensing is not allowed; section 10
  makes it unnecessary.

    3. Protecting Users' Legal Rights From Anti-Circumvention Law.

    No covered work shall be deemed part of an effective technological
  measure under any applicable law fulfilling obligations under article
  11 of the WIPO copyright treaty adopted on 20 December 1996, or
  similar laws prohibiting or restricting circumvention of such
  measures.

    When you convey a covered work, you waive any legal power to forbid
  circumvention of technological measures to the extent such circumvention
  is effected by exercising rights under this License with respect to
  the covered work, and you disclaim any intention to limit operation or
  modification of the work as a means of enforcing, against the work's
  users, your or third parties' legal rights to forbid circumvention of
  technological measures.

    4. Conveying Verbatim Copies.

    You may convey verbatim copies of the Program's source code as you
  receive it, in any medium, provided that you conspicuously and
  appropriately publish on each copy an appropriate copyright notice;
  keep intact all notices stating that this License and any
  non-permissive terms added in accord with section 7 apply to the code;
  keep intact all notices of the absence of any warranty; and give all
  recipients a copy of this License along with the Program.

    You may charge any price or no price for each copy that you convey,
  and you may offer support or warranty protection for a fee.

    5. Conveying Modified Source Versions.

    You may convey a work based on the Program, or the modifications to
  produce it from the Program, in the form of source code under the
  terms of section 4, provided that you also meet all of these conditions:

      a) The work must carry prominent notices stating that you modified
      it, and giving a relevant date.

      b) The work must carry prominent notices stating that it is
      released under this License and any conditions added under section
      7.  This requirement modifies the requirement in section 4 to
      "keep intact all notices".

      c) You must license the entire work, as a whole, under this
      License to anyone who comes into possession of a copy.  This
      License will therefore apply, along with any applicable section 7
      additional terms, to the whole of the work, and all its parts,
      regardless of how they are packaged.  This License gives no
      permission to license the work in any other way, but it does not
      invalidate such permission if you have separately received it.

      d) If the work has interactive user interfaces, each must display
      Appropriate Legal Notices; however, if the Program has interactive
      interfaces that do not display Appropriate Legal Notices, your
      work need not make them do so.

    A compilation of a covered work with other separate and independent
  works, which are not by their nature extensions of the covered work,
  and which are not combined with it such as to form a larger program,
  in or on a volume of a storage or distribution medium, is called an
  "aggregate" if the compilation and its resulting copyright are not
  used to limit the access or legal rights of the compilation's users
  beyond what the individual works permit.  Inclusion of a covered work
  in an aggregate does not cause this License to apply to the other
  parts of the aggregate.

    6. Conveying Non-Source Forms.

    You may convey a covered work in object code form under the terms
  of sections 4 and 5, provided that you also convey the
  machine-readable Corresponding Source under the terms of this License,
  in one of these ways:

      a) Convey the object code in, or embodied in, a physical product
      (including a physical distribution medium), accompanied by the
      Corresponding Source fixed on a durable physical medium
      customarily used for software interchange.

      b) Convey the object code in, or embodied in, a physical product
      (including a physical distribution medium), accompanied by a
      written offer, valid for at least three years and valid for as
      long as you offer spare parts or customer support for that product
      model, to give anyone who possesses the object code either (1) a
      copy of the Corresponding Source for all the software in the
      product that is covered by this License, on a durable physical
      medium customarily used for software interchange, for a price no
      more than your reasonable cost of physically performing this
      conveying of source, or (2) access to copy the
      Corresponding Source from a network server at no charge.

      c) Convey individual copies of the object code with a copy of the
      written offer to provide the Corresponding Source.  This
      alternative is allowed only occasionally and noncommercially, and
      only if you received the object code with such an offer, in accord
      with subsection 6b.

      d) Convey the object code by offering access from a designated
      place (gratis or for a charge), and offer equivalent access to the
      Corresponding Source in the same way through the same place at no
      further charge.  You need not require recipients to copy the
      Corresponding Source along with the object code.  If the place to
      copy the object code is a network server, the Corresponding Source
      may be on a different server (operated by you or a third party)
      that supports equivalent copying facilities, provided you maintain
      clear directions next to the object code saying where to find the
      Corresponding Source.  Regardless of what server hosts the
      Corresponding Source, you remain obligated to ensure that it is
      available for as long as needed to satisfy these requirements.

      e) Convey the object code using peer-to-peer transmission, provided
      you inform other peers where the object code and Corresponding
      Source of the work are being offered to the general public at no
      charge under subsection 6d.

    A separable portion of the object code, whose source code is excluded
  from the Corresponding Source as a System Library, need not be
  included in conveying the object code work.

    A "User Product" is either (1) a "consumer product", which means any
  tangible personal property which is normally used for personal, family,
  or household purposes, or (2) anything designed or sold for incorporation
  into a dwelling.  In determining whether a product is a consumer product,
  doubtful cases shall be resolved in favor of coverage.  For a particular
  product received by a particular user, "normally used" refers to a
  typical or common use of that class of product, regardless of the status
  of the particular user or of the way in which the particular user
  actually uses, or expects or is expected to use, the product.  A product
  is a consumer product regardless of whether the product has substantial
  commercial, industrial or non-consumer uses, unless such uses represent
  the only significant mode of use of the product.

    "Installation Information" for a User Product means any methods,
  procedures, authorization keys, or other information required to install
  and execute modified versions of a covered work in that User Product from
  a modified version of its Corresponding Source.  The information must
  suffice to ensure that the continued functioning of the modified object
  code is in no case prevented or interfered with solely because
  modification has been made.

    If you convey an object code work under this section in, or with, or
  specifically for use in, a User Product, and the conveying occurs as
  part of a transaction in which the right of possession and use of the
  User Product is transferred to the recipient in perpetuity or for a
  fixed term (regardless of how the transaction is characterized), the
  Corresponding Source conveyed under this section must be accompanied
  by the Installation Information.  But this requirement does not apply
  if neither you nor any third party retains the ability to install
  modified object code on the User Product (for example, the work has
  been installed in ROM).

    The requirement to provide Installation Information does not include a
  requirement to continue to provide support service, warranty, or updates
  for a work that has been modified or installed by the recipient, or for
  the User Product in which it has been modified or installed.  Access to a
  network may be denied when the modification itself materially and
  adversely affects the operation of the network or violates the rules and
  protocols for communication across the network.

    Corresponding Source conveyed, and Installation Information provided,
  in accord with this section must be in a format that is publicly
  documented (and with an implementation available to the public in
  source code form), and must require no special password or key for
  unpacking, reading or copying.

    7. Additional Terms.

    "Additional permissions" are terms that supplement the terms of this
  License by making exceptions from one or more of its conditions.
  Additional permissions that are applicable to the entire Program shall
  be treated as though they were included in this License, to the extent
  that they are valid under applicable law.  If additional permissions
  apply only to part of the Program, that part may be used separately
  under those permissions, but the entire Program remains governed by
  this License without regard to the additional permissions.

    When you convey a copy of a covered work, you may at your option
  remove any additional permissions from that copy, or from any part of
  it.  (Additional permissions may be written to require their own
  removal in certain cases when you modify the work.)  You may place
  additional permissions on material, added by you to a covered work,
  for which you have or can give appropriate copyright permission.

    Notwithstanding any other provision of this License, for material you
  add to a covered work, you may (if authorized by the copyright holders of
  that material) supplement the terms of this License with terms:

      a) Disclaiming warranty or limiting liability differently from the
      terms of sections 15 and 16 of this License; or

      b) Requiring preservation of specified reasonable legal notices or
      author attributions in that material or in the Appropriate Legal
      Notices displayed by works containing it; or

      c) Prohibiting misrepresentation of the origin of that material, or
      requiring that modified versions of such material be marked in
      reasonable ways as different from the original version; or

      d) Limiting the use for publicity purposes of names of licensors or
      authors of the material; or

      e) Declining to grant rights under trademark law for use of some
      trade names, trademarks, or service marks; or

      f) Requiring indemnification of licensors and authors of that
      material by anyone who conveys the material (or modified versions of
      it) with contractual assumptions of liability to the recipient, for
      any liability that these contractual assumptions directly impose on
      those licensors and authors.

    All other non-permissive additional terms are considered "further
  restrictions" within the meaning of section 10.  If the Program as you
  received it, or any part of it, contains a notice stating that it is
  governed by this License along with a term that is a further
  restriction, you may remove that term.  If a license document contains
  a further restriction but permits relicensing or conveying under this
  License, you may add to a covered work material governed by the terms
  of that license document, provided that the further restriction does
  not survive such relicensing or conveying.

    If you add terms to a covered work in accord with this section, you
  must place, in the relevant source files, a statement of the
  additional terms that apply to those files, or a notice indicating
  where to find the applicable terms.

    Additional terms, permissive or non-permissive, may be stated in the
  form of a separately written license, or stated as exceptions;
  the above requirements apply either way.

    8. Termination.

    You may not propagate or modify a covered work except as expressly
  provided under this License.  Any attempt otherwise to propagate or
  modify it is void, and will automatically terminate your rights under
  this License (including any patent licenses granted under the third
  paragraph of section 11).

    However, if you cease all violation of this License, then your
  license from a particular copyright holder is reinstated (a)
  provisionally, unless and until the copyright holder explicitly and
  finally terminates your license, and (b) permanently, if the copyright
  holder fails to notify you of the violation by some reasonable means
  prior to 60 days after the cessation.

    Moreover, your license from a particular copyright holder is
  reinstated permanently if the copyright holder notifies you of the
  violation by some reasonable means, this is the first time you have
  received notice of violation of this License (for any work) from that
  copyright holder, and you cure the violation prior to 30 days after
  your receipt of the notice.

    Termination of your rights under this section does not terminate the
  licenses of parties who have received copies or rights from you under
  this License.  If your rights have been terminated and not permanently
  reinstated, you do not qualify to receive new licenses for the same
  material under section 10.

    9. Acceptance Not Required for Having Copies.

    You are not required to accept this License in order to receive or
  run a copy of the Program.  Ancillary propagation of a covered work
  occurring solely as a consequence of using peer-to-peer transmission
  to receive a copy likewise does not require acceptance.  However,
  nothing other than this License grants you permission to propagate or
  modify any covered work.  These actions infringe copyright if you do
  not accept this License.  Therefore, by modifying or propagating a
  covered work, you indicate your acceptance of this License to do so.

    10. Automatic Licensing of Downstream Recipients.

    Each time you convey a covered work, the recipient automatically
  receives a license from the original licensors, to run, modify and
  propagate that work, subject to this License.  You are not responsible
  for enforcing compliance by third parties with this License.

    An "entity transaction" is a transaction transferring control of an
  organization, or substantially all assets of one, or subdividing an
  organization, or merging organizations.  If propagation of a covered
  work results from an entity transaction, each party to that
  transaction who receives a copy of the work also receives whatever
  licenses to the work the party's predecessor in interest had or could
  give under the previous paragraph, plus a right to possession of the
  Corresponding Source of the work from the predecessor in interest, if
  the predecessor has it or can get it with reasonable efforts.

    You may not impose any further restrictions on the exercise of the
  rights granted or affirmed under this License.  For example, you may
  not impose a license fee, royalty, or other charge for exercise of
  rights granted under this License, and you may not initiate litigation
  (including a cross-claim or counterclaim in a lawsuit) alleging that
  any patent claim is infringed by making, using, selling, offering for
  sale, or importing the Program or any portion of it.

    11. Patents.

    A "contributor" is a copyright holder who authorizes use under this
  License of the Program or a work on which the Program is based.  The
  work thus licensed is called the contributor's "contributor version".

    A contributor's "essential patent claims" are all patent claims
  owned or controlled by the contributor, whether already acquired or
  hereafter acquired, that would be infringed by some manner, permitted
  by this License, of making, using, or selling its contributor version,
  but do not include claims that would be infringed only as a
  consequence of further modification of the contributor version.  For
  purposes of this definition, "control" includes the right to grant
  patent sublicenses in a manner consistent with the requirements of
  this License.

    Each contributor grants you a non-exclusive, worldwide, royalty-free
  patent license under the contributor's essential patent claims, to
  make, use, sell, offer for sale, import and otherwise run, modify and
  propagate the contents of its contributor version.

    In the following three paragraphs, a "patent license" is any express
  agreement or commitment, however denominated, not to enforce a patent
  (such as an express permission to practice a patent or covenant not to
  sue for patent infringement).  To "grant" such a patent license to a
  party means to make such an agreement or commitment not to enforce a
  patent against the party.

    If you convey a covered work, knowingly relying on a patent license,
  and the Corresponding Source of the work is not available for anyone
  to copy, free of charge and under the terms of this License, through a
  publicly available network server or other readily accessible means,
  then you must either (1) cause the Corresponding Source to be so
  available, or (2) arrange to deprive yourself of the benefit of the
  patent license for this particular work, or (3) arrange, in a manner
  consistent with the requirements of this License, to extend the patent
  license to downstream recipients.  "Knowingly relying" means you have
  actual knowledge that, but for the patent license, your conveying the
  covered work in a country, or your recipient's use of the covered work
  in a country, would infringe one or more identifiable patents in that
  country that you have reason to believe are valid.

    If, pursuant to or in connection with a single transaction or
  arrangement, you convey, or propagate by procuring conveyance of, a
  covered work, and grant a patent license to some of the parties
  receiving the covered work authorizing them to use, propagate, modify
  or convey a specific copy of the covered work, then the patent license
  you grant is automatically extended to all recipients of the covered
  work and works based on it.

    A patent license is "discriminatory" if it does not include within
  the scope of its coverage, prohibits the exercise of, or is
  conditioned on the non-exercise of one or more of the rights that are
  specifically granted under this License.  You may not convey a covered
  work if you are a party to an arrangement with a third party that is
  in the business of distributing software, under which you make payment
  to the third party based on the extent of your activity of conveying
  the work, and under which the third party grants, to any of the
  parties who would receive the covered work from you, a discriminatory
  patent license (a) in connection with copies of the covered work
  conveyed by you (or copies made from those copies), or (b) primarily
  for and in connection with specific products or compilations that
  contain the covered work, unless you entered into that arrangement,
  or that patent license was granted, prior to 28 March 2007.

    Nothing in this License shall be construed as excluding or limiting
  any implied license or other defenses to infringement that may
  otherwise be available to you under applicable patent law.

    12. No Surrender of Others' Freedom.

    If conditions are imposed on you (whether by court order, agreement or
  otherwise) that contradict the conditions of this License, they do not
  excuse you from the conditions of this License.  If you cannot convey a
  covered work so as to satisfy simultaneously your obligations under this
  License and any other pertinent obligations, then as a consequence you may
  not convey it at all.  For example, if you agree to terms that obligate you
  to collect a royalty for further conveying from those to whom you convey
  the Program, the only way you could satisfy both those terms and this
  License would be to refrain entirely from conveying the Program.

    13. Remote Network Interaction; Use with the GNU General Public License.

    Notwithstanding any other provision of this License, if you modify the
  Program, your modified version must prominently offer all users
  interacting with it remotely through a computer network (if your version
  supports such interaction) an opportunity to receive the Corresponding
  Source of your version by providing access to the Corresponding Source
  from a network server at no charge, through some standard or customary
  means of facilitating copying of software.  This Corresponding Source
  shall include the Corresponding Source for any work covered by version 3
  of the GNU General Public License that is incorporated pursuant to the
  following paragraph.

    Notwithstanding any other provision of this License, you have
  permission to link or combine any covered work with a work licensed
  under version 3 of the GNU General Public License into a single
  combined work, and to convey the resulting work.  The terms of this
  License will continue to apply to the part which is the covered work,
  but the work with which it is combined will remain governed by version
  3 of the GNU General Public License.

    14. Revised Versions of this License.

    The Free Software Foundation may publish revised and/or new versions of
  the GNU Affero General Public License from time to time.  Such new versions
  will be similar in spirit to the present version, but may differ in detail to
  address new problems or concerns.

    Each version is given a distinguishing version number.  If the
  Program specifies that a certain numbered version of the GNU Affero General
  Public License "or any later version" applies to it, you have the
  option of following the terms and conditions either of that numbered
  version or of any later version published by the Free Software
  Foundation.  If the Program does not specify a version number of the
  GNU Affero General Public License, you may choose any version ever published
  by the Free Software Foundation.

    If the Program specifies that a proxy can decide which future
  versions of the GNU Affero General Public License can be used, that proxy's
  public statement of acceptance of a version permanently authorizes you
  to choose that version for the Program.

    Later license versions may give you additional or different
  permissions.  However, no additional obligations are imposed on any
  author or copyright holder as a result of your choosing to follow a
  later version.

    15. Disclaimer of Warranty.

    THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
  APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
  HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
  OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
  IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
  ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

    16. Limitation of Liability.

    IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
  WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
  THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
  GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
  USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
  DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
  PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
  EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
  SUCH DAMAGES.

    17. Interpretation of Sections 15 and 16.

    If the disclaimer of warranty and limitation of liability provided
  above cannot be given local legal effect according to their terms,
  reviewing courts shall apply local law that most closely approximates
  an absolute waiver of all civil liability in connection with the
  Program, unless a warranty or assumption of liability accompanies a
  copy of the Program in return for a fee.

                       END OF TERMS AND CONDITIONS

              How to Apply These Terms to Your New Programs

    If you develop a new program, and you want it to be of the greatest
  possible use to the public, the best way to achieve this is to make it
  free software which everyone can redistribute and change under these terms.

    To do so, attach the following notices to the program.  It is safest
  to attach them to the start of each source file to most effectively
  state the exclusion of warranty; and each file should have at least
  the "copyright" line and a pointer to where the full notice is found.

      <one line to give the program's name and a brief idea of what it does.>
      Copyright (C) <year>  <name of author>

      This program is free software: you can redistribute it and/or modify
      it under the terms of the GNU Affero General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.

      This program is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Affero General Public License for more details.

      You should have received a copy of the GNU Affero General Public License
      along with this program.  If not, see <https://www.gnu.org/licenses/>.

  Also add information on how to contact you by electronic and paper mail.

    If your software can interact with users remotely through a computer
  network, you should also make sure that it provides a way for users to
  get its source.  For example, if your program is a web application, its
  interface could display a "Source" link that leads users to an archive
  of the code.  There are many ways you could offer source, and different
  solutions will be better for different programs; see section 13 for the
  specific requirements.

    You should also get your employer (if you work as a programmer) or school,
  if any, to sign a "copyright disclaimer" for the program, if necessary.
  For more information on this, and how to apply and follow the GNU AGPL, see
  <https://www.gnu.org/licenses/>.
#+end_src

** Changelog
All updates to this repository should be logged here. I follow [[https://keepachangelog.com/][Keep a
Changelog]]'s recommendations here, because again, standardization is importantfor
outward-facing documentation.

It's worth noting here that I will keep the links updated to the [[https://sr.ht/][Sourcehut]]
repository commits, as that is the main place I will be uploading the source to
share.

#+begin_src markdown :tangle Changelog.md
# Changelog
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic
Versioning](https://semver.org/spec/v2.0.0.html).

## [Unreleased]
### Added
    - `ssh-wrapper` - Allows system-ssh to easily be called when also using Guix
      Binary SSH.
    - `pull-projects` - Quickly pull down all projects from my personal server.
### Changed
    - Updated this changelog to reflect progress post-0.1.0 release.
### Removed
    - Nothing.

## [0.1.0]
### Added
    - `adlmidi-wrapper` - allows standard calling of program with options, so it
      can easily work with EMMS.
    - `push-all-git-repos` - a scheme library to push all git repositories in a
      specific directory. Has a wrapper in `pagr.scm`.
    - Standard Project Files (README.md, Changelog.md, AUTHORS, LICENSE,
      .gitignore).
    - Autotools setup.
### Changed
    - Rewrote `pagr.sh` in GNU Guile Scheme as `pagr.scm`.
### Removed
    - Obsolete `pagr.sh` wrapper script for `push-all-git-repos`.

[Unreleased]: https://git.sr.ht/~yewscion/yewscion-scripts/log
[0.1.0]: https://git.sr.ht/~yewscion/yewscion-scripts/refs/0.1.0
#+end_src

** AUTHORS
If You contribute to this repo, Your information belongs in this file. I will
attempt to ensure this, but if You'd like to simply include Your information
here in any pull requests, I am more than happy to accept that.

#+begin_src text :tangle "AUTHORS"
# This is the list of the Acreid project's significant contributors.
#
# This does not necessarily list everyone who has contributed code.  To see the
# full list of contributors, see the revision history in source control.
Christopher Rodriguez <yewscion@gmail.com>
#+end_src

** .gitignore
This is an important file for any git repository. I generate mine using
[[https://www.toptal.com/developers/gitignore][gitignore.io]] right now, and add to it as needed during work on the project.

#+begin_src conf :tangle .gitignore
# Created by https://www.toptal.com/developers/gitignore/api/emacs,linux,commonlisp
# Edit at https://www.toptal.com/developers/gitignore?templates=emacs,linux,commonlisp

### CommonLisp ###
,*.FASL
,*.fasl
,*.lisp-temp
,*.dfsl
,*.pfsl
,*.d64fsl
,*.p64fsl
,*.lx64fsl
,*.lx32fsl
,*.dx64fsl
,*.dx32fsl
,*.fx64fsl
,*.fx32fsl
,*.sx64fsl
,*.sx32fsl
,*.wx64fsl
,*.wx32fsl

### Emacs ###
# -*-mode: gitignore; -*-
,*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
,*.elc
auto-save-list
tramp
.\#*

# Org-mode
.org-id-locations
,*_archive

# flymake-mode
,*_flymake.*

# eshell files
/eshell/history
/eshell/lastdir

# elpa packages
/elpa/

# reftex files
,*.rel

# AUCTeX auto folder
/auto/

# cask packages
.cask/
dist/

# Flycheck
flycheck_*.el

# server auth directory
/server/

# projectiles files
.projectile

# directory configuration
.dir-locals.el

# network security
/network-security.data


### Linux ###

# temporary files which can be createdif a process still has a handle open of a deleted file
.fuse_hidden*

# KDE directory preferences
.directory

# Linux trash folder which might appear on any partition or disk
.Trash-*

# .nfs files are created when an open file is removed but is still being accessed
.nfs*

# End of https://www.toptal.com/developers/gitignore/api/emacs,linux,commonlisp

/Makefile.in
/aclocal.m4
/autom4te.cache/
/bin/pagr.go
/build-aux/
/configure
#+end_src

* Autotools Project Files
** bootstrap

#+begin_src bash :tangle bootstrap :shebang #! /bin/sh
autoreconf --verbose --install --force
#+end_src

** configure.ac

#+begin_src autoconf :tangle configure.ac
dnl Process this file with autoconf
AC_INIT([yewscion-scripts],
        [0.1.0],
        [yewscion@gmail.com],
        [yewscion-scripts-0.1.0.tar.gz],
        [https://sr.ht/~yewscion/yewscion-scripts/])
AC_CONFIG_SRCDIR([yewscion-scripts.org])
AC_CONFIG_AUX_DIR([build-aux])
AM_INIT_AUTOMAKE([-Wall -Werror foreign])

GUILE_PKG([3.0])
GUILE_PROGS
if test "x$GUILD" = "x"; then
   AC_MSG_ERROR(['guild' binary not found;
   please check Your guile installation.])
fi
AC_CONFIG_FILES([Makefile])
AC_CONFIG_FILES([pre-inst-env], [chmod +x pre-inst-env])
AC_OUTPUT
#+end_src

** Makefile.am

#+begin_src makefile-automake :tangle Makefile.am
include guile.am

SOURCES =				\
push-all-git-repos.scm                  \
pull-projects.scm                       \
display-encoded-wifi.scm

EXTRA_DIST =				\
README.md				\
bootstrap				\
pre-inst-env.in				\
bin/pagr.scm				\
bin/adlmidi-wrapper.scm			\
bin/ssh-wrapper.scm                     \
bin/pull-projects.scm                   \
bin/display-encoded-wifi.scm


bin_SCRIPTS =				\
pagr					\
adlmidi-wrapper				\
ssh-wrapper                             \
pull-projects                           \
display-encoded-wifi

pagr: bin/pagr.scm
	sed -e 's,#!\/usr\/bin\/env -S guile -e main -s,\#!$(GUILE) \\,g' \
	 < $(srcdir)/bin/pagr.scm > ./pagr
	chmod +x pagr
adlmidi-wrapper: bin/adlmidi-wrapper.scm
	sed -e 's,#!\/usr\/bin\/env -S guile -e main -s,\#!$(GUILE) \\,g' \
	< $(srcdir)/bin/adlmidi-wrapper.scm > ./adlmidi-wrapper
	chmod +x adlmidi-wrapper
ssh-wrapper: bin/ssh-wrapper.scm
	sed -e 's,#!\/usr\/bin\/env -S guile -e main -s,\#!$(GUILE) \\,g' \
	< $(srcdir)/bin/ssh-wrapper.scm > ./ssh-wrapper
	chmod +x ssh-wrapper
pull-projects: bin/pull-projects.scm
	sed -e 's,#!\/usr\/bin\/env -S guile -e main -s,\#!$(GUILE) \\,g' \
	< $(srcdir)/bin/pull-projects.scm > ./pull-projects
	chmod +x pull-projects
display-encoded-wifi: bin/display-encoded-wifi.scm
	sed -e 's,#!\/usr\/bin\/env -S guile -e main -s,\#!$(GUILE) \\,g' \
	< $(srcdir)/bin/display-encoded-wifi.scm > ./display-encoded-wifi
	chmod +x display-encoded-wifi
push-all-git-repos.scm:
	cat < $(srcdir)/share/guile/push-all-git-repos.scm \
	> push-all-git-repos.scm
pull-projects.scm:
	cat < $(srcdir)/share/guile/pull-projects.scm > \
	pull-projects.scm
display-encoded-wifi.scm:
	cat < $(srcdir)/share/guile/display-encoded-wifi.scm > \
	display-encoded-wifi.scm
clean-local:
	rm -rfv push-all-git-repos.scm pagr adlmidi-wrapper \
	ssh-wrapper pull-projects pull-projects.scm config.log \
	config.status pre-inst-env Makefile display-encoded-wifi.scm \
	display-encoded-wifi *~
#+end_src

** guile.am

#+begin_src makefile-automake :tangle guile.am
moddir = $(datadir)/guile/site/$(GUILE_EFFECTIVE_VERSION)
godir = $(libdir)/guile/$(GUILE_EFFECTIVE_VERSION)/site-ccache

GOBJECTS = $(SOURCES:%.scm=%.go)

nobase_dist_mod_DATA = $(SOURCES) $(NOCOMP_SOURCES)
nobase_go_DATA = $(GOBJECTS)

# Make sure source files are installed first, so that the mtime of
# installed compiled files is greater than that of installed source
# files.  See
# <http://lists.gnu.org/archive/html/guile-devel/2010-07/msg00125.html>
# for details.
guile_install_go_files = install-nobase_goDATA
$(guile_install_go_files): install-nobase_dist_modDATA

CLEANFILES = $(GOBJECTS)
GUILE_WARNINGS = -Wunbound-variable -Warity-mismatch -Wformat
SUFFIXES = .scm .go
.scm.go:
	$(AM_V_GEN)$(top_builddir)/pre-inst-env $(GUILD) \
	compile $(GUILE_WARNINGS) -o "$@" "$<"
#+end_src

** pre-inst-env.in
#+begin_src bash :tangle pre-inst-env.in
#!/bin/sh

abs_top_srcdir="`cd "@abs_top_srcdir@" > /dev/null; pwd`"
abs_top_builddir="`cd "@abs_top_builddir@" > /dev/null; pwd`"

GUILE_LOAD_COMPILED_PATH="$abs_top_builddir${GUILE_LOAD_COMPILED_PATH:+:}$GUILE_LOAD_COMPILED_PATH"
GUILE_LOAD_PATH="$abs_top_builddir:$abs_top_srcdir${GUILE_LOAD_PATH:+:}:$GUILE_LOAD_PATH"
export GUILE_LOAD_COMPILED_PATH GUILE_LOAD_PATH

PATH="$abs_top_builddir:$PATH"
export PATH

exec "$@"
#+end_src
* Language Project Files
These files vary based on the programming languages used in a
project. Otherwise, basically the same as above: Files that need to
exist for the project, but don't include code outside of defining
the project in some abstract way.

None exist yet, here.
* Wrappers
** ADLMidi Wrapper
The main issue this script is meant to solve is that the =adlmidi=
command expects the filename to come first, and the arguments
after. However, =emms= expects the arguments to come first, and the
filename to be the last argument. I thought it would be easier to
wrap =adlmidi= than to rewrite part of =emms=, so I chose to make a
wrapper script that accnepts arguments the way =emms= expects, and
feeds them to =adlmidi= the way that it expects. So everyone is
happy.

#+begin_src scheme :tangle bin/adlmidi-wrapper.scm
#!/usr/bin/env -S guile -e main -s
-e main -s
!#
(use-modules (srfi srfi-1))
(define (main args)
  (let ((arguments (cdr args)))
    (cond ((= (length arguments) 0)
           (display (string-append
                     "Usage: adlmidi-wrapper [ARGUMENTS] MIDIFILE\n\n"

                     "Explanation of Arguments:\n\n"

                     "  FILE:        The MIDI file You want to play using\n"
                     "               adlmidi.\n"
                     "  [ARGUMENTS]: An optional list of arguments to adlmidi\n"
                     "               itself, which would normally go at the\n"
                     "               end of the command.\n\n"

                     "This program is entirely written in GNU Guile Scheme,\n"
                     "and You are welcome to change it how You see fit.\n\n"

                     "Guile Online Help: <https://www.gnu.org/software/guile/>\n"
                     "Local Online Help: 'info guile'\n")))
          ((= (length arguments) 1)
           (system (string-append "adlmidi " (car arguments)))
           (system "reset"))
          (else
           (let ((systemcall (string-append "adlmidi "
                                            (last arguments)
                                            " "
                                            (reduce
                                             (lambda (x y)
                                               (string-append y " " x))
                                             ""
                                             (drop-right arguments 1)))))
             (display systemcall)
             (newline)
             (system systemcall)
             (system "reset"))))))
#+end_src
** System SSH
#+begin_src scheme :tangle bin/ssh-wrapper.scm
#!/usr/bin/env -S guile -e main -s
-e main -s
!#
(use-modules (srfi srfi-1))
(define (main args)
  (let ((arguments (cdr args)))
    (cond ((= (length arguments) 0)
           (display (string-append
                     "Usage: ssh-wrapper [ARGUMENTS] HOST\n\n"

                     "The main use for this tool is allowing You to fall\n"
                     "back to the system-installed SSH client when using\n"
                     "a GNU Guix Binary Install.\n\n"
                     "Explanation of Arguments:\n\n"

                     "  HOST:        The host You are trying to SSH into.\n"
                     "  [ARGUMENTS]: An optional list of arguments to ssh\n"
                     "               command.\n\n"

                     "This program is entirely written in GNU Guile Scheme,\n"
                     "and You are welcome to change it how You see fit.\n\n"

                     "Guile Online Help: <https://www.gnu.org/software/guile/>\n"
                     "Local Online Help: 'info guile'\n")))
          ((= (length arguments) 1)
           (system (string-append "/usr/bin/ssh " (car arguments)))
           (system "reset"))
          (else
           (let ((systemcall (string-append "/usr/bin/ssh "
                                            (last arguments)
                                            " "
                                            (reduce
                                             (lambda (x y)
                                               (string-append y " " x))
                                             ""
                                             (drop-right arguments 1)))))
             (display systemcall)
             (newline)
             (system systemcall)
             (system "reset"))))))


#+end_src
* Repetitive Tasks
** Push All Git Repos
   :PROPERTIES:
  :header-args: :tangle share/guile/push-all-git-repos.scm :mkdirp yes
  :END:

I'm going to try to write this in Guile, because I want to start
using it more.

First, we need to ensure all the tools I'll be using are available
to me. We'll also define a module, so that we can easily load this
code elsewhere.

#+begin_src scheme :eval yes :results output
(define-module (push-all-git-repos)
  :use-module (ice-9 ftw)
  :export (push-all-git-repos))
#+end_src

Then, we'll need to define some functions to do our heavy lifting
for us.

#+begin_src scheme
(define (directory->list directory)
  "Returns a list containing the names of each file in the given directory."
  (map
   (lambda (x)
     (string-append directory "/" x))
   (map
    car
    (cddr (file-system-tree directory)))))
(define (repository? directory)
  "Tests to see if the given directory is a git repository."
  (member (string-append directory "/.git") (directory->list directory)))
(define (find-git-repos directory)
  "Returns a list of all git repositories currently inside of DIRECTORY."
  (filter repository? (directory->list directory)))
(define (push-git-repo repository remote)
  "Calls system's git to push REPOSITORY to REMOTE."
  (narrate-directory-push repository)
  (display (string-append "git -C " repository " push " remote " trunk\n"))
  (system (string-append "git -C " repository " push " remote " trunk")))
#+end_src

With those defined, we'll need to begin work on the stuff that will
be displayed to the user.

#+begin_src scheme
(define (greet-the-user)
  "Display a greeting to the user."
  (display "Beginning push of all git repos in ~/Documents now!\n"))
(define (narrate-directory-push directory)
  "Tell the user we are pushing the given DIRECTORY"
  (display (string-append "Pushing " directory " now!\n")))
(define (farewell-the-user)
  "Bid the user farewell."
  (display "All directories pushed!\n"))
#+end_src

Finally, to tie it all together, we'll build one big function.

#+begin_src scheme
(define (push-all-git-repos directory remote)
  "Pushes all Git Repositories inside of DIRECTORY"
  (greet-the-user)
  (map
   (lambda (repo)
     (push-git-repo repo remote))
   (find-git-repos directory))
  (farewell-the-user))
#+end_src

And to add it to our =$PATH=, we'll need to make a script that calls
this library.

#+begin_src scheme :tangle bin/pagr.scm :eval never
#!/usr/bin/env -S guile -e main -s
-e main -s
!#
(use-modules (push-all-git-repos))
(define (main args)
  (let ((arguments (cdr args)))
    (cond ((not (equal? (length arguments) 2))
           (display (string-append
                     "Usage: pagr.scm DIRECTORY REMOTE\n\n"

                     "Explanation of Arguments:\n\n"

                     "  DIRECTORY: The directory in which all of the git\n"
                     "             repositories reside.\n"
                     "  REMOTE:    The name of the remote branch to which\n"
                     "             all git repositories found should be\n"
                     "             pushed.\n\n"

                     "This program is entirely written in GNU Guile Scheme,\n"
                     "and You are welcome to change it how You see fit.\n\n"

                     "Guile Online Help: <https://www.gnu.org/software/guile/>\n"
                     "Local Online Help: 'info guile'\n")))
          ((not (file-exists? (car arguments)))
           (format #t "ERROR: ~a does not exist!~%" (car arguments)))
          (else (push-all-git-repos (car arguments) (cadr arguments))))))
#+end_src
** Pull Projects
This (as of yet) undocumented project was designed to easily pull down
all of my projects from my personal server to the =~/Documents/=
directory on a new account.

Here's the library:

#+begin_src scheme :tangle share/guile/pull-projects.scm
(define-module (pull-projects)
  :use-module (ice-9 ftw)
  :use-module (srfi srfi-1)
  :use-module (srfi srfi-98)
  :export (pull-all-projects))
(define (greet-the-user host directory)
  (display (string-append "Pulling all projects from "
                          host
                          " into "
                          directory
                          " for You, now.\n\n")))
(define (farewell-the-user host directory)
  (display (string-append "Pulled all projects from "
                          host
                          " into "
                          directory
                          ".\n\n")))
(define (format-url gituser host repouser repo suffix)
  (string-append gituser "@" host ":" repouser "/" repo "." suffix))
(define (format-projects-for-server host user projects)
  (map
   (lambda (repo)
     (format-url "git" host user repo "git"))
   projects))
(define (narrate-project-pull project)
  (display (string-append "\n--\n\nPulling down the '" project "' project…\n")))
(define (format-git-clone directory repo)
  (string-append "git -C " directory " clone " repo))
(define (clone-git-repo directory repo)
  (let ((command (format-git-clone directory repo)))
    (system (string-append command "\n"))))
(define (safe-clone-repo directory gituser host repouser repo suffix)
  (let ((clone-url (format-url gituser host repouser repo suffix))
        (clone-dir (canonicalize-path directory)))
    (if (file-exists? (string-append clone-dir "/" repo))
        (skip-repo-exists repo directory)
        (clone-git-repo clone-dir clone-url))))
(define (skip-repo-exists repo clone-dir)
  (display (string-append
            "Warning: Skipping '"
            repo
            "' as there's already a file\nnamed '"
            repo
            "' inside of '"
            clone-dir
            "'.\n")))
(define (pull-all-projects directory gituser host repouser suffix projects)
  (let* ((home-dir (get-environment-variable "HOME"))
         (dest-dir (string-append home-dir "/" directory)))
    (greet-the-user host dest-dir)
    (map
     (lambda (repo)
       (narrate-project-pull repo)
       (safe-clone-repo dest-dir gituser host repouser repo suffix))
     projects)
    (farewell-the-user host dest-dir)))

#+end_src

And here's the script that calls that library:
#+begin_src scheme :tangle bin/pull-projects.scm
#!/usr/bin/env -S guile -e main -s
-e main -s
!#
(use-modules (pull-projects))
(define projects '("acreid"
                   "ccna"
                   "cd2b"
                   "cdr255-website"
                   "clhumour"
                   "clojure-brave-true"
                   "cmsc-mode"
                   "cm-step-compiler"
                   "dotfiles"
                   "gitjournal"
                   "grokking-algorithms"
                   "grokking-simplicity"
                   "guix-home"
                   "land-of-lisp"
                   "org"
                   "org-roam"
                   "password-store"
                   "provision-zq630"
                   "self-sovereign-identity"
                   "sicp"
                   "the-programmers-brain"
                   "wiki-templates"
                   "yewscion-blog"
                   "yewscion-guix-channel"
                   "yewscion-scripts"
                   "yewscion-website"))
(define (main args)
  (pull-all-projects "Documents"
                     "git"
                     "cdr255.com"
                     "yewscion"
                     "git"
                     projects))

#+end_src
* Tools
** Display Encoded Wifi
The idea behind this script was to make it easy from my shell to immediately
tell which wifi network I was connected to by generating a short encoded
sequence of characters and inserting it into my prompt.

*** Library
:PROPERTIES:
:header-args: :tangle share/guile/display-encoded-wifi.scm
:END:

We'll start by defining the module =display-encoded-wifi=, and exporting both
the function =display-encoded-wifi= and the function it uses to create that hash
(in case I can use it elsewhere) =string->encoded-string=.

**** Module Definition
#+begin_src scheme
(define-module (display-encoded-wifi)
  :use-module (ice-9 ftw)             ; Filesystem stuff
  :use-module (ice-9 rdelim)          ; Delimited I/O
  :use-module (ice-9 popen)           ; Pipes
  :export (get-result-line            ; Interact with environment
           string->encoded-string     ; Encodes Arbitrary Strings
           shell-command-string))     ; Shell Commands to Run
#+end_src

**** Changing Bases
Originally, I wanted to convert things to base64, but unfortunately all of the
functions I could find operated on bit streams as opposed to number streams
(that is, they produced a longer-length string at minimum, in order to encode
things like pictures, instead of literally changing number bases). So, we are
going to roll our own here.

The basic process for changing bases is fairly straightforward:

1. Take a number (say 47) and a base (let's use binary (base 2)).
2. Figure out the highest exponent we can apply to the base and not exceed the
   number (2^2=4, 2^3=8, 2^4=16, 2^5=32, 2^6=64, ∴ the highest exponent is 5 in
   our example).
3. Note how many times the base raised to that exponent can go into the number
   (2^5 is 32, which divides into 47 once) and subtract the base raised to the
   exponent times the number of times it can evenly divide into it from the
   original (47 - ((2^5)*1) = 15) and carry this number forward.
4. Repeat this process for all exponents until You complete the 0th exponent
   (2^5 goes into 47 once, 2^4 goes into 15 zero times, 2^3 goes into 15 once,
   2^2 goes into 7 once, 2^1 goes into 3 once, 2^0 goes into 1 once.)
5. If You have any remainder after the 0 exponent, You chose the wrong highest
   exponent.
6. Combine these numbers into one sequence of digits, and You have the number in
   the new base (47 in binary is 101111).


We'll divide this into two functions, both of which will be recursive. The first
is =highest-exponent-needed=, which will complete step 1. The second is
=values-by-position=, which will complete steps 2-4. Finally, we would convert
this list of values by position into a string, but as we are going to be
encoding this string with a custom set of digits, we'll save that step for a
later section.

#+begin_src scheme
(define* (highest-exponent-needed number base #:optional (exponent 0))
  "Takes a number NUMBER and a numerical base BASE (and optionally a
starting exponent EXPONENT) and returns a number.

Calculates the highest exponent that a specified BASE can be raised to
and still cleanly divide into a NUMBER. The optional EXPONENT argument
is mostly for recursion and referential transparency, but can also be
used to speed up calculation if a known-good exponent is supplied."
  ; This algorithm recurses until it fails to produce an exponent that
  ; divides cleanly, and then returns the exponent preceding the
  ; current one (as the current one will have failed).
  (if (< number (expt base exponent))
      (-  exponent 1)
      (highest-exponent-needed number base (+ 1 exponent))))
#+end_src

The =values-by-position= function is a bit more complicated, and could probably
be refactored.

#+begin_src scheme
(define* (values-by-position number base highest-exponent #:optional (starting-list '()))
  "Takes a decimal number NUMBER, a numerical base BASE, an exponent
HIGHEST-EXPONENT that is assumed to be the highest exponent that BASE
can be raised to and still cleanly divide into NUMBER (and optionally
a prepopulated list STARTING-LIST), and returns a list of integers
representing the value at each rank of the NUMBER in the BASE."
  (cond
   ; If we have a negative exponent, we are done, so return the list.
   ((< highest-exponent 0) starting-list)
   ; If we have 0 as our exponent, we don't need to manipulate the
   ; base.
   ((= highest-exponent 0) (cons number (values-by-position number base (- highest-exponent 1))))
   ; Otherwise, calculate the place value base on the exponent, create
   ; the value at that position, and recurse with an exponent one
   ; lower than the current one. This is probably where we could
   ; refactor.
   (else (let* ((place (expt base highest-exponent))
                     (delta (truncate (/ number place))))
                (cons delta (values-by-position (- number (* place delta)) base (- highest-exponent 1)))))))
#+end_src
**** Encoding
In order to properly encode a number in a custom character set, we first need a
character set. Though You can easily sepcify Your own, I included a default
(which is actually just the Unicode Block for [[https://en.wikipedia.org/wiki/Geometric_Shapes_(Unicode)][Geometric Shapes]]) because that's
what I will be using most of the time. It's defined in the global variable
=character-set=, and is a list of characters.

#+begin_src scheme
(define character-set '(#\x25A0  ; This default character set is
                                 ; actually just the unicode block for
                                 ; Geometric Shapes. So long as You
                                 ; specify a list of characters, You
                                 ; can easily substitute any arbitrary
                                 ; list of characters in the below
                                 ; formulae.
                        #\x25A1
                        #\x25A2
                        #\x25A3
                        #\x25A4
                        #\x25A5
                        #\x25A6
                        #\x25A7
                        #\x25A8
                        #\x25A9
                        #\x25AA
                        #\x25AB
                        #\x25AC
                        #\x25AD
                        #\x25AE
                        #\x25AF
                        #\x25B0
                        #\x25B1
                        #\x25B2
                        #\x25B3
                        #\x25B4
                        #\x25B5
                        #\x25B6
                        #\x25B7
                        #\x25B8
                        #\x25B9
                        #\x25BA
                        #\x25BB
                        #\x25BC
                        #\x25BD
                        #\x25BE
                        #\x25BF
                        #\x25C0
                        #\x25C1
                        #\x25C2
                        #\x25C3
                        #\x25C4
                        #\x25C5
                        #\x25C6
                        #\x25C7
                        #\x25C8
                        #\x25C9
                        #\x25CA
                        #\x25CB
                        #\x25CC
                        #\x25CD
                        #\x25CE
                        #\x25CF
                        #\x25D0
                        #\x25D1
                        #\x25D2
                        #\x25D3
                        #\x25D4
                        #\x25D5
                        #\x25D6
                        #\x25D7
                        #\x25D8
                        #\x25D9
                        #\x25DA
                        #\x25DB
                        #\x25DC
                        #\x25DD
                        #\x25DE
                        #\x25DF
                        #\x25E0
                        #\x25E1
                        #\x25E2
                        #\x25E3
                        #\x25E4
                        #\x25E5
                        #\x25E6
                        #\x25E7
                        #\x25E8
                        #\x25E9
                        #\x25EA
                        #\x25EB
                        #\x25EC
                        #\x25ED
                        #\x25EE
                        #\x25EF
                        #\x25F0
                        #\x25F1
                        #\x25F2
                        #\x25F3
                        #\x25F4
                        #\x25F5
                        #\x25F6
                        #\x25F7
                        #\x25F8
                        #\x25F9
                        #\x25FA
                        #\x25FB
                        #\x25FC
                        #\x25FD
                        #\x25FE
                        #\x25FF ))
#+end_src

Let's start by encoding a single digit. Here's the algorithm:

1. Take the integer, and make sure it is within the bounds of our set. Larger
   numbers are just discarded for now.
2. Once that is confirmed, we'll simply look up which character is used at that
   integer's position, and return it as a character.


 This can be one function, thanks to a =let= form.

#+begin_src scheme
(define (encode-digit number character-set)
  "Takes an integer NUMBER and a list of characters CHARACTER-SET, and
returns the character at the NUMBER position in that set. If NUMBER is
larger than the length of the list, returns NIL."
  (let ((array (list->array 1 character-set))) ; Convert the list to
                                               ; an array, to support
                                               ; large sets.
    (unless (> number (- (array-length array) 1)) ; Filter out numbers
                                                  ; outside of our
                                                  ; set.
      (array-ref array number))))
#+end_src

We can then apply this to a list of integers using =map=. Here's a wrapper
function to make this more straightforward.

#+begin_src scheme
(define* (encode-digit-list list #:optional (character-set character-set))
  "Takes a list of integers LIST (and optionally a list of characters
CHARACTER-SET, and returns a list of characters taken from the set by
using the integers in LIST as indices to CHARACTER-SET."
  (map
   (lambda (x)
     (encode-digit x character-set))
   list))
#+end_src
**** Decoding
We are using a sha1sum to turn our wifi ESSID into a number, and so we have to
decode the hexadecimal number it creates into a list of values to encode.

Our =values-by-position= function is well suited for this, but needs some
wrapping in order to make it work in a straightforward way.

1. We'll need to decode the number from a hexadecimal string to a decimal number
   for this to easily work.
2. We then want to make sure that our base includes all entries in our character
   set, so we set the base equal to the length of the character set minus 1
   (because arrays are indexed at zero.)
3. We then need to determine our highest rank (based on the largest exponent, as
   above, using =highest-exponent-needed=).
4. Once we have all of this, we can just call =values-by-position= with the
   above values as arguments.


#+begin_src scheme
(define* (value->list value #:optional (starting-base 16) (character-set character-set))
  "Takes a string which represents a number VALUE (and optionally a
base STARTING-BASE (defaults to hexadecimal) and a character set
CHARACTER-SET (defaults to included character-set)) and returns a list
of integers representing the index in the character set needed for a
specific rank."
  (let* ((number (string->number value starting-base))
                                        ; Decode the string into a
                                        ; decimal number.
         (ending-base (- (length character-set) 1))
                                        ; The base is the length of
                                        ; the character set minus 1,
                                        ; due to zero indexing.
         (exponent (highest-exponent-needed number ending-base)))
                                        ; Start with the highest
                                        ; exponent that lets the base
                                        ; cleanly divide into the
                                        ; number.
    (values-by-position number ending-base exponent)))
#+end_src

That said, our number is still much too large to realistically be a "short
encoded string", so we need to take the above number and reduce it somehow.

1. If the length of the list is 1, we can just return that list.
2. If the length of the list is 2, we can add the two numbers together, divide
   them by the length of the character set minus 1 (zero indexing), and return
   the list.
3. If the list is larger than two, we take the first two elements, apply step 2,
   and then recurse with the rest of the list.

#+begin_src scheme
(define* (combine-sum start-list #:optional (character-set character-set))
  "Takes a list of integers START LIST (and optionally a CHARACTER-SET), and
returns a list of integers sums each pair of integers obtained by summing each
pair of integers in START-LIST and dividing the result by the length of
CHARACTER-SET minus 1."
  (let ((denominator (- (length character-set) 1)) ; For Zero Indexing, we need
                                                   ; to subtract 1.
        (list-length (length start-list)))         
  (cond ((= list-length 1)
         start-list)
        ((= list-length 2)
         (list (modulo
                (+ (car start-list) (cadr start-list))
                denominator)))
        (else
         (cons (modulo
                (+ (car start-list) (cadr start-list))
                denominator)
               (combine-sum (cddr start-list)))))))
#+end_src
**** Outside Dependencies
We are explicitly depending on =nm-cli= and =sha1sum= for now, though I'd like
to implement the hashing inside of guile eventually. First, we'll define the
series of commands we are going to use:

1. =nmcli connection show --active=

   Shows the active network connections using NetworkManager.
2. =grep wifi=

   Filter so only lines containing 'wifi' are included.
3. =sed 's/  .*-.*-.*//'=

   Remove the end of the output lines from =nmcli=.
4. =sha1sum=

   Calculate a SHA1SUM hash of the lines remaining.
5. =sed 's/  -//'=

   Remove the end of the hash returned by =sha1sum=.


Let's store this string of commands (connected by pipes) in a symbol to make the
resulting function easier to call.

#+begin_src scheme
; This is the list of commands run on the shell to get the original
; hex value.
(define shell-command-string
  (string-append
   "nmcli connection show --active | " ; Get the active connections.
   "grep wifi | "                      ; Only keep the wifi.
   "sed 's/  .*-.*-.*//' | "           ; Only keep the essid.
   "sha1sum | "                        ; Hash it.
   "sed 's/  -//'"))                   ; Remove formatting, leaving                                       ; hex.
#+end_src

We'll need to run this string on the shell, and read the result into a variable.

#+begin_src scheme
(define (get-result-line command)
  "Obtain a value from outside of scheme that will be used as the base
for our encoding by running COMMAND. Only reads the first line of
output."
  (let* ((port (open-input-pipe command))
         (value (read-line port)))
    (close-pipe port)
    value))
#+end_src

**** Putting it all Together
Now we just need to tie the above functions together into one big function we
can call to get our encoded string. We'll tie the above functions
together like so:

1. Take a value, which should be a string representing a hexadecimal number.
2. Turn it into a list of ranked values with =value->list=.
3. Reduce those ranked values to a list no longer than 7 characters long using
   =combine-sum=. (NOTE: I need to refactor this restraint; Right now it is just
   kept at this length by trial and error.
4. Encode the resulting list of values using =encode-digit-list=.
5. Turn it into a string using =list->string=.


In order to make this as general-use as possible, we'll need to define an
optional argument for the character set and one for the base.

#+begin_src scheme
(define* (string->encoded-string original-string #:optional (base 16) (character-set character-set))
  "Takes a string which represents a number in some base ORIGINAL-STRING (and
optionally a numerical base for that string BASE and a character set to encode
the string into CHARACTER-SET and returns the encoded string."
  (list->string
   (encode-digit-list
    (combine-sum
     (combine-sum
      (value->list original-string base character-set)
      character-set)
     character-set)
    character-set)))
#+end_src

*** Script
This will be the thing that actually calls the above library.

#+begin_src scheme :tangle bin/display-encoded-wifi.scm
#!/usr/bin/env -S guile -e main -s
-e main -s
!#
(use-modules (display-encoded-wifi))
(define (main args)
  (let ((arguments (cdr args))
        (path (string-split (getenv "PATH") (lambda (x) (eqv? x #\:)))))
    (cond ((not (equal? (length arguments) 0))
           (display (string-append
                     "Usage: display-encoded-wifi\n\n"

                     "Explanation of Arguments:\n\n"

                     "  There are no arguments for this command.\n\n"

                     "This program depends on nmcli, grep, sed, and sha1sum.\n\n"

                     "This program is entirely written in GNU Guile Scheme,\n"
                     "and You are welcome to change it how You see fit.\n\n"

                     "Guile Online Help: <https://www.gnu.org/software/guile/>\n"
                     "Local Online Help: 'info guile'\n")))
          ((or
            (not (search-path path "nmcli"))
            (not (search-path path "sed"))
            (not (search-path path "grep"))
            (not (search-path path "sha1sum")))
           (display (string-append
                     "ERROR: One or more of the following programs was not found\n"
                     "       in Your $PATH. Please ensure they are all installed\n"
                     "       before using this program.\n\n"

                     "- nmcli (NetworkManager)\n"
                     "- sed (coreutils)\n"
                     "- grep (coreutils)\n"
                     "- sha1sum (coreutils)\n\n")))
          (else
           (string->encoded-string (get-result-line shell-command-string)))))
#+end_src

* Links                                                            :noexport:
** Export Docs
#+begin_src elisp :eval yes
(org-texinfo-export-to-info)
(org-man-export-to-man)
(org-html-export-to-html)
(org-ascii-export-to-ascii)
(org-latex-export-to-pdf)
#+end_src
