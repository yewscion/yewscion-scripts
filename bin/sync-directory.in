#!/usr/bin/env -S guile \\
-e main -s
!#
#|
This program is a part of @PACKAGE_STRING@.

@LICENSE@

You are welcome to change this software in any way You see fit. Some
helpful information should You choose to do so:

Bug Reports: @PACKAGE_BUGREPORT@
Homepage: @PACKAGE_URL@
Documentation: @PACKAGE_DOCS_COMMAND@ @PACKAGE_NAME@

Happy Hacking!
|#
(use-modules (ice-9 getopt-long)   ; For CLI Options and Flags.
             (ice-9 ftw)           ; For Filesystem Access.
             (ice-9 textual-ports) ; For Writing to Files.
             (srfi srfi-19)        ; For Dates.
             (cdr255 userlib)      ; My personal user library.
             (cdr255 combinators))
;;; Specific Script Variables
(define %default-config
  ";;; Configuration File for sync-directory.
;;; Part of the yewscion-scripts project.
;;;
;;; Edit/Add new systems as below. First argument is the host name, second
;;; is the url, and third is the SSH port.
;;;

(define sync-directory-configuration
  (list
    (\"bar.com\" \"foo@bar.com\")))
")

(define configuration
  (get-or-create-configuration-file
   "$HOME/.config/yewscion-scripts/sync-directory.scm"
   %default-config))

(eval-string configuration)

;;; Main
(define option-spec
  '((version (single-char #\v) (value #f))
    (help (single-char #\h) (value #f))))

(define (main args)
  (let* ((options (getopt-long args option-spec))
         (version (option-ref options 'version #f))
         (help (option-ref options 'help #f))
                                        ; Add more here.
         (non-options (option-ref options '() '())))
    (cond ((or
            (not (equal? (length non-options) 2))
            help
            version)
           (display %help-string))
          (%missing
           (display %missing))
          (else
           (sync-directory sync-directory-configuration
                           (car non-options)
                           (cadr non-options))))))

(define (build-command-string host remote-dir local-dir)
  (string-append
   "unison -rsync -fastcheck default -times -ignorelocks -contactquietly "
   "-ui text -batch -prefer ssh://"
   host "/" remote-dir " ./" local-dir " ssh://" host "/" remote-dir))

(define (show-command-string host remote-dir local-dir)
  ((bluebird display build-command-string) host remote-dir local-dir))

(define (run-command-string host remote-dir local-dir)
  ((bluebird system build-command-string) host remote-dir local-dir))

(define (sync-directory config directory remote-user)
  (let ((dir (string-append "/home/" remote-user "/" directory)))
    (for-each (lambda (x)
                      (run-command-string x dir directory))
              (map (lambda (x) (cadr x))
                   config))))
;;; Standard Script Variables
(define %command-and-package-alist
  '(("ssh" "openssh")
    ("rsync" "rsync")
    ("unison" "unison")))

(define description-spec
  '((help action "Display this help")
    (version action "Display version info")))

(define note-spec
  (list (string-append "This program depends on ssh, rsync, and unison.\n"
                       "It expects these to be installed on local\n"
                       "and remote systems. The configuration file is\n"
                       "located at:\n\"$HOME/.config/yewscion-scripts/"
                       "sync-directory.scm\".\n\n"
                       "By default, it will sync the given directory\n"
                       "with /each/ server listed in the config file.\n")))

(define license-spec
  (string-append
   "This program is a part of @PACKAGE_STRING@\n"
   "@LICENSE@"
   "Please report bugs to @PACKAGE_BUGREPORT@\n"
   "and see @PACKAGE_URL@\n"
   "for the latest version.\n\n"

   "This program is entirely written in GNU Guile Scheme,\n"
   "and You are welcome to change it how You see fit.\n\n"
    
   "Guile Online Help: <https://www.gnu.org/software/guile/>\n"
   "Local Online Help: 'info @PACKAGE_STRING@'\n"))

(define %help-string
  (generate-help-string "Usage: sync-directory [-h|-v] directory"
                        option-spec
                        description-spec
                        note-spec
                        license-spec))
(define %missing
  (missing-commands %command-and-package-alist))

;; Local Variables:
;; mode: scheme
;; End:
