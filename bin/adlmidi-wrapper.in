#!/usr/bin/env -S guile \\
-e main -s
!#
(use-modules (cdr255 userlib)       ; Reimplement anything used from here.
             (ice-9 getopt-long)    ; For CLI Options and Flags.
             (ice-9 ftw)            ; For Filesystem Access.
             (ice-9 textual-ports)  ; For Writing to Files.
             (srfi srfi-1))         ; For reduce fold map etc.
(define (main args)
  (let* ((options (getopt-long args option-spec))
         (version (option-ref options 'version #f))
         (help (option-ref options 'help #f))
         (non-options (option-ref options '() #f)))
    (cond (version
           (display version-string)
           (quit))
          ((or help (= (length non-options) 0))
           (display help-string)
           (quit))
          ((= (length non-options) 1)
           (system (string-append "adlmidiplay " (car non-options))))
          (else
           (let ((systemcall (generate-system-call arguments)))
             (system systemcall))))))
(define option-spec
  '((version (single-char #\v) (value #f))
    (help (single-char #\h) (value #f))))
(define option-descriptions
  '((version action "Display version string.")
    (help action "Display this help text.")))
(define package-license-string
  (string-append
   "This program is a part of @PACKAGE_STRING@.\n\n@LICENSE@\n\nYou are "
   "welcome to change this software in any way You see fit. Some helpful"
   "\ninformation should You choose to do so:\n\nBug Reports: "
   "@PACKAGE_BUGREPORT@\nHomepage: @PACKAGE_URL@\nDocumentation: "
   "@PACKAGE_DOCS_COMMAND@ @PACKAGE_NAME@\n\nHappy Hacking!"))
(define version-string
  "adlmidi-wrapper is part of @PACKAGE_STRING@.\n")
(define notes-strings
  #f)
(define help-string
  (generate-help-string
   "Usage: adlmidi-wrapper [ARGUMENTS] MIDIFILE"
   option-spec
   option-descriptions
   notes-strings
   package-license-string))
(define (generate-system-call arguments)
  (string-append "adlmidiplay "
                 (last arguments)
                 " "
                 (reduce
                  (lambda (x y)
                    (string-append y " " x))
                  ""
                  (drop-right arguments 1))))
(define deps-string
   (generate-deps-string
    '(("adlmidiplay" "libadlmidi"))))

;; Local Variables:
;; mode: scheme
;; End:
