#|
This program is a part of @PACKAGE_STRING@.

@LICENSE@

Bug Reports: @PACKAGE_BUGREPORT@
Homepage: @PACKAGE_URL@
Documentation: @PACKAGE_DOCS_COMMAND@ @PACKAGE_NAME@
|#
(define-module (yewscion run-backups)
  :use-module (ice-9 ftw)
  :use-module (cdr255 userlib)
  :use-module (cdr255 combinators)
  :export (restic))
(define* (restic show? #:key (directories default-backup-directories)
                 (repository default-repository)
                 (excludes default-backup-excludes))
  "Create a call to restic to execute the backups, either running
or showing it to the user.

This is an ACTION.

Arguments
=========

SHOW? <boolean>: Whether to show or run the restic call.

DIRECTORIES <<list> of <strings>>: A list of directories to back up.

REPOSITORY <string>: A directory containing a restic repository.

EXCLUDES <<list> of <strings>>: A list of patterns to avoid backing up.

Returns
=======

Undefined.

Impurities
==========
Used entirely for side effects."
  (if show?
      (show-restic directories repository excludes)
      (run-restic directories repository excludes)))
(define (generate-backup-directories list-of-directories)
  (let ((list-string (string-join list-of-directories
                                  "\n"
                                  'infix)))
    (dereference-env-in-string
     "HOME"
     list-string)))
(define (generate-backup-excludes list-of-excludes)
  (string-join (map (lambda (x) 
                      (string-append "--exclude "
                                     x))
                    list-of-excludes)
               " "
               'infix))
(define default-backup-directories
  (generate-backup-directories
   '("$HOME/.local/bin"
     "$HOME/Archives"
     "$HOME/Books"
     "$HOME/Mail"
     "$HOME/Mirrors"
     "$HOME/Music"
     "$HOME/Pictures"
     "$HOME/Research"
     "$HOME/Videos")))
(define default-backup-excludes
  (generate-backup-excludes
   '("**/inbox/**"
     "inbox/**")))
(define default-repository
  (dereference-env-in-string
   "HOME"
   "$HOME/Backups"))
(define* (construct-restic-call directories repository excludes)
  (let ((directory-string (join-directories directories)))
    (string-append
     "restic -r "
     repository
     " backup "
     excludes
     " "
     directory-string)))
(define* (procedure-wrapper procedure action #:rest args)
  (apply action (list (apply procedure args))))
(define* (show-backups #:key (directories
                            default-backup-directories)
                       (repository
                        default-repository)
                       (excludes
                        default-backup-excludes))
  (procedure-wrapper construct-restic-call
                     display
                     directories
                     repository
                     excludes))
(define* (run-backups #:key (directories
                             default-backup-directories)
                      (repository
                       default-repository)
                      (excludes
                       default-backup-excludes))
  (procedure-wrapper construct-restic-call
                     system
                     directories
                     repository
                     excludes))
(define (join-directories directories)
  (replace-regexp-in-string "\n" " " directories))
